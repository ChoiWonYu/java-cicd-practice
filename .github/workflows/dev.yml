name: CI/CD

on:
  push:
    branches:
      - dev

env:
  ECR_REGISTRY: ${{ secrets.AWS_DEV_ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.AWS_DEV_ECR_REPOSITORY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Create Dockerrun.aws.json file
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "'$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8080"
              }
            ]
          }' > Dockerrun.aws.json

      - name: Upload Dockerrun.aws.json to S3
        run: |
          aws s3 cp Dockerrun.aws.json s3://your-s3-bucket/Dockerrun-${{ github.sha }}.aws.json
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Deploy to Elastic Beanstalk
#        env:
#          AWS_REGION: ap-northeast-2
#          APPLICATION_NAME: cicd-test-application
#          ENVIRONMENT_NAME: Cicd-test-application-env
#          VERSION_LABEL: github-actions-${{ github.sha }}
#          S3_BUCKET: elasticbeanstalk-ap-northeast-2-381492019209
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: cicd-test
#          IMAGE_TAG: latest
#        run: |
#          echo "version: 1
#          containerDefinitions:
#            - name: web
#              image: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
#              essential: true
#              memory: 512
#              portMappings:
#                - containerPort: 8080
#                  hostPort: 8080" > Dockerrun.aws.json
#          zip -r deploy.zip Dockerrun.aws.json
#          aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip
#          aws elasticbeanstalk create-application-version --application-name $APPLICATION_NAME --version-label $VERSION_LABEL --source-bundle S3Bucket=$S3_BUCKET,S3Key=deploy.zip --region $AWS_REGION
#          aws elasticbeanstalk update-environment --environment-name $ENVIRONMENT_NAME --version-label $VERSION_LABEL --region $AWS_REGION
